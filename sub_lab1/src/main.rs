use std::io::{Read, Write};
use std::net::{TcpListener, TcpStream};

// ‡∏ï‡∏±‡πâ‡∏á buffer size ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á boundary ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
const BUFFER_SIZE: usize = 64;

fn print_separator() {
    println!("{}", "=".repeat(80));
}

fn print_chunk_header(chunk_num: usize, size: usize, progress: usize, total: usize) {
    println!("\nüì¶ CHUNK #{} ({} bytes) - Progress: {}/{} bytes", 
             chunk_num, size, progress, total);
    println!("{}", "-".repeat(80));
}

fn visualize_boundary(data: &[u8], boundary_pattern: &str) {
    let text = String::from_utf8_lossy(data);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    println!("Raw data:");
    println!("{}", text);
    
    // ‡∏´‡∏≤ boundary positions
    if let Some(pos) = text.find(boundary_pattern) {
        println!("\nüéØ FOUND COMPLETE BOUNDARY at position {}", pos);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á boundary
        let before = &text[..pos];
        let boundary = &text[pos..pos + boundary_pattern.len()];
        let after = if pos + boundary_pattern.len() < text.len() {
            &text[pos + boundary_pattern.len()..]
        } else {
            ""
        };
        
        println!("  Before: {:?}", before);
        println!("  Boundary: {:?}", boundary);
        println!("  After: {:?}", after);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö partial boundary ‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢ chunk
    let boundary_bytes = boundary_pattern.as_bytes();
    for i in 1..boundary_bytes.len() {
        if data.len() >= i && &data[data.len() - i..] == &boundary_bytes[..i] {
            println!("\n‚ö†Ô∏è  PARTIAL BOUNDARY at end ({} bytes): {:?}", 
                     i, 
                     String::from_utf8_lossy(&data[data.len() - i..]));
            println!("   This might continue in next chunk!");
            break; // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà partial ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        }
    }
}

fn handle_client(mut stream: TcpStream) {
    print_separator();
    println!("üîå NEW CLIENT CONNECTED");
    print_separator();

    let mut buffer = [0u8; BUFFER_SIZE];
    let mut chunk_num = 0;
    let mut total_bytes = 0;
    let mut all_data = Vec::new();

    // ‡∏≠‡πà‡∏≤‡∏ô HTTP headers ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ boundary
    let mut header_buffer = Vec::new();
    let mut temp_buf = [0u8; 1];
    let mut found_boundary = String::new();
    let mut content_length = 0usize;
    
    // ‡∏≠‡πà‡∏≤‡∏ô headers ‡∏à‡∏ô‡πÄ‡∏à‡∏≠ \r\n\r\n
    loop {
        if stream.read(&mut temp_buf).unwrap_or(0) == 0 {
            break;
        }
        header_buffer.push(temp_buf[0]);
        
        if header_buffer.len() >= 4 
            && &header_buffer[header_buffer.len()-4..] == b"\r\n\r\n" {
            break;
        }
    }
    
    // Parse boundary ‡πÅ‡∏•‡∏∞ Content-Length ‡∏à‡∏≤‡∏Å headers
    let headers = String::from_utf8_lossy(&header_buffer);
    println!("üìã HTTP HEADERS:");
    println!("{}", headers);
    print_separator();
    
    // ‡∏´‡∏≤ boundary
    if let Some(content_type_line) = headers.lines()
        .find(|l| l.to_lowercase().starts_with("content-type:")) {
        if let Some(boundary_start) = content_type_line.find("boundary=") {
            found_boundary = content_type_line[boundary_start + 9..]
                .trim()
                .to_string();
            found_boundary = format!("--{}", found_boundary);
            println!("üîç Detected boundary: {:?}", found_boundary);
        }
    }
    
    // ‡∏´‡∏≤ Content-Length
    if let Some(cl_line) = headers.lines()
        .find(|l| l.to_lowercase().starts_with("content-length:")) {
        if let Some(len_str) = cl_line.split(':').nth(1) {
            content_length = len_str.trim().parse().unwrap_or(0);
            println!("üìè Content-Length: {} bytes", content_length);
        }
    }
    
    print_separator();

    // ‡∏≠‡πà‡∏≤‡∏ô body ‡∏ï‡∏≤‡∏° Content-Length
    let mut bytes_read = 0;
    let final_boundary = format!("{}--", found_boundary);
    let mut found_end = false;
    
    loop {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Content-Length ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if content_length > 0 && bytes_read >= content_length {
            println!("\n‚úÖ READ COMPLETE ({}/{} bytes)", bytes_read, content_length);
            break;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏µ‡πà bytes
        let to_read = if content_length > 0 {
            (content_length - bytes_read).min(BUFFER_SIZE)
        } else {
            BUFFER_SIZE
        };
        
        match stream.read(&mut buffer[..to_read]) {
            Ok(0) => {
                println!("\nüîö CONNECTION CLOSED"); //‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ http 1.1 ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î keep alive ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤ ‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡πà‡∏õ‡∏¥‡∏î  connterction tcp
                break;
            }
            Ok(n) => {
                chunk_num += 1;
                bytes_read += n;
                total_bytes += n;

                let progress_total = if content_length > 0 { content_length } else { bytes_read };
                print_chunk_header(chunk_num, n, bytes_read, progress_total);
                
                let chunk_data = &buffer[..n];
                all_data.extend_from_slice(chunk_data);
                
                // ‡πÅ‡∏™‡∏î‡∏á chunk ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
                visualize_boundary(chunk_data, &found_boundary);
                
                // ‡πÅ‡∏™‡∏î‡∏á hex ‡∏Ç‡∏≠‡∏á 20 bytes ‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡πâ‡∏≤‡∏¢
                println!("\nFirst 20 bytes (hex): {:02x?}", 
                         &chunk_data[..n.min(20)]);
                if n > 20 {
                    println!("Last 20 bytes (hex): {:02x?}", 
                             &chunk_data[n.saturating_sub(20)..]);
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö final boundary (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ Content-Length)
                let chunk_str = String::from_utf8_lossy(chunk_data);
                if chunk_str.contains(&final_boundary) {
                    found_end = true;
                    println!("\nüèÅ FOUND FINAL BOUNDARY");
                    if content_length == 0 {
                        break;
                    }
                }
            }
            Err(e) => {
                eprintln!("‚ùå Error reading: {}", e);
                break;
            }
        }
    }

    print_separator();
    println!("üìä SUMMARY");
    println!("Total chunks: {}", chunk_num);
    println!("Total bytes: {}", total_bytes);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô boundary ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let full_data = String::from_utf8_lossy(&all_data);
    let boundary_count = full_data.matches(&found_boundary).count();
    println!("Total boundaries found: {}", boundary_count);
    
    if found_end {
        println!("‚úÖ Found final boundary: {}", final_boundary);
    }
    
    print_separator();

    // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö
    let response = "HTTP/1.1 200 OK\r\nContent-Length: 2\r\n\r\nOK";
    match stream.write_all(response.as_bytes()) {
        Ok(_) => println!("‚úÖ Response sent successfully"),
        Err(e) => eprintln!("‚ùå Error sending response: {}", e),
    }
}

fn main() {
    let listener = TcpListener::bind("127.0.0.1:8080")
        .expect("Failed to bind to address");

    println!("\nüöÄ SERVER STARTED");
    println!("üìç Listening on: 127.0.0.1:8080");
    println!("üì¶ Buffer size: {} bytes (intentionally small to split boundaries)", BUFFER_SIZE);
    println!("\nüí° Test with curl:");
    println!("   curl -X POST http://127.0.0.1:8080/upload \\");
    println!("        -F \"field1=value1\" \\");
    println!("        -F \"field2=value2\" \\");
    println!("        -F \"username=JohnDoe\" \\");
    println!("        -F \"email=john.doe@example.com\"");
    println!("\n   Or with a file:");
    println!("   curl -X POST http://127.0.0.1:8080/upload \\");
    println!("        -F \"username=JohnDoe\" \\");
    println!("        -F \"profile=@/path/to/file.jpg\"");
    print_separator();

    for stream in listener.incoming() {
        match stream {
            Ok(stream) => {
                handle_client(stream);
            }
            Err(e) => {
                eprintln!("‚ùå Error accepting connection: {}", e);
            }
        }
    }
}